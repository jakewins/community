/** * Copyright (c) 2002-2012 "Neo Technology," * Network Engine for Objects in Lund AB [http://neotechnology.com] * * This file is part of Neo4j. * * Neo4j is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program.  If not, see <http://www.gnu.org/licenses/>. */package org.neo4j.server;import java.io.IOException;import org.neo4j.kernel.configuration.Config;import org.neo4j.kernel.lifecycle.LifeSupport;import org.neo4j.kernel.lifecycle.Lifecycle;import org.neo4j.server.configuration.ConfiguratorWrappedConfig;import org.neo4j.server.configuration.ServerConfig;import org.neo4j.server.configuration.ServerSettings;public abstract class Bootstrapper implements Lifecycle{    public static final Integer OK = 0;    public static final Integer WEB_SERVER_STARTUP_ERROR_CODE = 1;    public static final Integer GRAPH_DATABASE_STARTUP_ERROR_CODE = 2;    public static final Integer WEB_SERVER_SHUTDOWN_ERROR_CODE = 3;        @Deprecated    public static void main( String[] args )    {        Main.main(args);    }        protected LifeSupport life = new LifeSupport();        protected AbstractNeoServer server;    protected final Config config;        public Bootstrapper()    {        this.config = createConfig();    }        public Bootstrapper(Config config)    {        this.config = config;    }    protected abstract AbstractNeoServer createNeoServer();        @Override    public void init() throws Throwable    {        this.server = life.add( createNeoServer() );    }    @Override    public void start() throws Throwable    {        life.start();    }    @Override    public void stop()    {        life.stop();    }        @Override    public void shutdown() throws Throwable    {        life.shutdown();    }    public AbstractNeoServer getServer()    {        return server;    }        protected Config createConfig()    {        try {            return ServerConfig.fromFile(System.getProperty( ServerSettings.neo_server_config_file.name()));        } catch(IOException e)        {            throw new RuntimeException("Unable to read server configuration, see nested exception.", e);        }    }        @Deprecated    protected ConfiguratorWrappedConfig getConfigurator()    {        return new ConfiguratorWrappedConfig(config);    }    protected boolean isMoreDerivedThan( Bootstrapper other )    {        // Default implementation just checks if this is a subclass of other        return other.getClass()                .isAssignableFrom( getClass() );    }}