/** * Copyright (c) 2002-2012 "Neo Technology," * Network Engine for Objects in Lund AB [http://neotechnology.com] * * This file is part of Neo4j. * * Neo4j is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program.  If not, see <http://www.gnu.org/licenses/>. */package org.neo4j.server;import java.io.IOException;import java.util.List;import org.neo4j.graphdb.DependencyResolver;import org.neo4j.graphdb.GraphDatabaseService;import org.neo4j.graphdb.TransactionFailureException;import org.neo4j.helpers.collection.IteratorUtil;import org.neo4j.kernel.configuration.Config;import org.neo4j.kernel.lifecycle.LifeSupport;import org.neo4j.kernel.lifecycle.Lifecycle;import org.neo4j.kernel.logging.ClassicLoggingService;import org.neo4j.kernel.logging.LogbackService;import org.neo4j.kernel.logging.Logging;import org.neo4j.kernel.logging.StringLogger;import org.neo4j.server.configuration.ConfiguratorWrappedConfig;import org.neo4j.server.configuration.ServerConfig;import org.neo4j.server.configuration.ServerSettings;import org.neo4j.server.database.Database;import org.neo4j.server.logging.Loggers;import org.neo4j.server.modules.ServerModule;import org.neo4j.server.rrd.StatisticsStore;import org.neo4j.server.startup.healthcheck.StartupHealthCheck;import org.neo4j.server.startup.healthcheck.StartupHealthCheckRule;import org.neo4j.server.statistic.StatisticCollector;import org.neo4j.server.web.Jetty6WebServer;import org.neo4j.server.web.WebServer;import org.rrd4j.core.RrdDb;public abstract class Bootstrapper    implements Lifecycle{        @Deprecated    public static void main( String[] args )    {        Main.main(args);    }        private class ServerDependencyResolver implements DependencyResolver     {        @Override        @SuppressWarnings("unchecked")        public <T> T resolveDependency(Class<T> type)        {            if(type.isAssignableFrom(Config.class))            {                return (T)config;            } else if(type.isAssignableFrom(Logging.class))            {                return (T)logging;            } else if(type.isAssignableFrom(Database.class))            {                return (T)database;            } else if(type.isAssignableFrom(GraphDatabaseService.class))            {                return (T)database.getGraph();            } else if(type.isAssignableFrom(StatisticCollector.class))            {                return (T)requestStatistics;            } else if(type.isAssignableFrom(StatisticsStore.class))            {                return (T)statisticsStore;            } else if(type.isAssignableFrom(RrdDb.class))            {                return (T)statisticsStore.getRrdDb();            } else if(type.isAssignableFrom(WebServer.class))            {                return (T)webServer;            } else if(type.isAssignableFrom(NeoServerWithEmbeddedWebServer.class))            {                return (T)server;            }            throw new IllegalArgumentException("Unable to satisfy dependency for '" + type.getCanonicalName() + "', no such component registered.");        }    }        protected LifeSupport life = new LifeSupport();        protected NeoServerWithEmbeddedWebServer server;    protected final Config config;    protected StringLogger log;        protected ServerDependencyResolver dependencyResolver = new ServerDependencyResolver();    protected Logging logging;    protected Jetty6WebServer webServer;    protected Database database;    protected StatisticCollector requestStatistics;    private StatisticsStore statisticsStore;        public Bootstrapper()    {        this.config = createConfig();    }        public Bootstrapper(Config config)    {        this.config = config;    }        @Override    public void init() throws Throwable    {        this.logging = life.add(createLogging());                this.log = logging.getLogger(Loggers.SERVER);                this.requestStatistics = new StatisticCollector();                this.database = life.add(createDatabase());                this.statisticsStore = new StatisticsStore(database, config);                this.webServer = new Jetty6WebServer(dependencyResolver, logging.getLogger(Loggers.WEBSERVER));        StartupHealthCheck startupHealthCheck = createStartupHealthCheck();                this.server = life.add( new NeoServerWithEmbeddedWebServer( this, database, dependencyResolver, log, startupHealthCheck,                config, webServer, createServerModules() ));    }    @Override    public void start() throws Throwable    {        try        {            log.info( "--- SERVER STARTUP START ---" );            life.start();            log.info( "--- SERVER STARTUP END ---" );        }        catch ( TransactionFailureException tfe )        {            log.error( "", tfe);            log.error( String.format( "Failed to start Neo Server on port [%d], because ", server.getWebServerPort() )                       + tfe + ". Another process may be using database location " + server.getDatabase()                               .getLocation() );            throw tfe;        }        catch ( Exception e )        {            log.error( "", e);            log.error( "Failed to start Neo Server on port [%s]", server.getWebServerPort() );            throw e;        }    }    @Override    public void stop()    {        life.stop();    }        @Override    public void shutdown() throws Throwable    {        log.info( "Neo4j Server shutdown initiated" );        try {            life.shutdown();            log.info( "Successfully shutdown Neo Server on port [%d], database [%s]", server.getWebServerPort(),                    config.get(ServerSettings.database_location) );        } catch(Throwable e) {            log.error( "Failed to cleanly shutdown Neo Server on port [%d], database [%s]. Reason [%s] ",                    server.getWebServerPort(), config.get(ServerSettings.database_location), e.getMessage() );            throw e;        }    }    public NeoServerWithEmbeddedWebServer getServer()    {        return server;    }        protected abstract Database createDatabase( );        protected abstract List<StartupHealthCheckRule> createHealthCheckRules();    protected abstract List<ServerModule> createServerModules();    protected Config createConfig()    {        try {            return ServerConfig.fromFile(System.getProperty( ServerSettings.neo_server_config_file.name()));        } catch(IOException e)        {            throw new RuntimeException("Unable to read server configuration, see nested exception.", e);        }    }    protected StartupHealthCheck createStartupHealthCheck()    {        return new StartupHealthCheck( logging.getLogger(Loggers.HEALTHCHECK), config, rules() );    }    protected Logging createLogging()    {        try        {            getClass().getClassLoader().loadClass("ch.qos.logback.classic.LoggerContext");            return new LogbackService( config );        }        catch( ClassNotFoundException e )        {            return new ClassicLoggingService(config);        }    }        @Deprecated    protected ConfiguratorWrappedConfig getConfigurator()    {        return new ConfiguratorWrappedConfig(config);    }    protected boolean isMoreDerivedThan( Bootstrapper other )    {        // Default implementation just checks if this is a subclass of other        return other.getClass()                .isAssignableFrom( getClass() );    }    private StartupHealthCheckRule[] rules()    {        return IteratorUtil.asCollection( createHealthCheckRules() )                .toArray( new StartupHealthCheckRule[0] );    }    public DependencyResolver getDependencyResolver()    {        return dependencyResolver;    }}